#!/bin/sh /etc/rc.common

START=80
STOP=20

USE_PROCD=1

APP=einat
# TODO: Migrate to UCI config
UCI_MANAGED_CONFIG=0


#_generate_config_from_uci $confpath
_generate_config_from_uci() {
    false
}

start_service() {
    mkdir -p /var/run/$APP
    if [ "$UCI_MANAGED_CONFIG" = "1" ]
    then
        logger -p notice "Generating config file from UCI config..."
        _generate_config_from_uci /var/run/$APP/config.toml
    elif [ -f /etc/$APP.toml ]
    then
        logger -p notice "Using existing config in /etc/$APP.toml..."
        cp /etc/$APP.toml /var/run/$APP/config.toml
    else
        logger -p warning "Using an empty config file!"
        touch /var/run/$APP/config.toml
    fi
    chmod -R $APP:$APP /var/run/$APP

    procd_open_instance $APP
    procd_set_param command /usr/bin/$APP
    procd_append_param command --config /var/run/$APP/config.toml

    procd_add_jail $APP log requirejail
    procd_add_jail_mount /var/run/$APP/config.toml
    wan=$(uci get network.wan.device)
    if [ -n "$wan" ]
    then
        procd_set_param netdev $wan
    fi
    procd_set_param user $APP
    # TODO: Maybe CAP_BPF instead CAP_SYS_ADMIN?
    procd_set_param capabilities /etc/capabilities/$APP.json
    procd_set_param stdout 1
    procd_set_param stderr 1
    procd_set_param no_new_privs 1

    procd_close_instance
}

service_triggers() {
    uci get network.wan.device | while read -r trigger
    do
        procd_add_reload_interface_trigger $trigger
    done
}
